<?php

/**
* Implements hook_requirements().
**/
function ug_system_requirements($phase) {
  global $base_url;
  $requirements = array();
  if ($phase == 'runtime') {
    // ------------------------
    // UPDATE NOTIFY EMAILS
    // ------------------------
    $update_notify_emails = variable_get('update_notify_emails', array());
    $requirements['ug_system_update_notify_emails'] = array(
      'title' => t('UG Update notify emails'),
      'value' => implode(', ', $update_notify_emails),
    );
    if (in_array('admin@example.com', $update_notify_emails)) {
      $requirements['ug_system_update_notify_emails']['description'] = t('Update notification email has not been changed from its default value.');
      $requirements['ug_system_update_notify_emails']['severity'] = REQUIREMENT_ERROR;
    }

    // ----------
    // SITE MAIL
    // ----------
    $site_mail = variable_get('site_mail');
    $requirements['ug_system_site_mail'] = array(
      'title' => t('UG Site e-mail'),
      'value' => check_plain($site_mail),
      'description' => t('This checks if site email is changed from no-reply@uoguelph.ca'),
    );
    if ($site_mail == 'no-reply@uoguelph.ca') {
      $requirements['ug_system_site_mail']['description'] = t('The site mail must be changed.');
      $requirements['ug_system_site_mail']['severity'] = REQUIREMENT_ERROR;
    }

    // -------------------
    // RECAPTCHA SITE KEY
    // -------------------
    $recaptcha_site_key = variable_get('recaptcha_site_key');
    $requirements['ug_system_recaptcha_site_key'] = array(
      'title' => t('UG recaptcha Site key'),
      'description' => t('This ensures the recaptcha site key is correct'),
    );
    if ($recaptcha_site_key == '') {
      $requirements['ug_system_recaptcha_site_key']['value'] = t('Key has not been set');
      $requirements['ug_system_recaptcha_site_key']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_recaptcha_site_key']['description'] = t('recaptcha Site key is missing/incorrect');
    }

    // ---------------------
    // RECAPTCHA SECRET KEY
    // ---------------------
    $recaptcha_secret_key = variable_get('recaptcha_secret_key');
    $requirements['ug_system_recaptcha_secret_key'] = array(
      'title' => t('UG recaptcha Secret key'),
      'description' => t('This ensures the recaptcha secret key is correct'),
    );
    if ($recaptcha_secret_key == '')  {
      $requirements['ug_system_recaptcha_secret_key']['value'] = t('Key has not been set');
      $requirements['ug_system_recaptcha_secret_key']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_recaptcha_secret_key']['description'] = t('recaptcha Secret key is missing/incorrect');
    }

    // -------------------
    // ERROR NOTIFICATIONS
    // -------------------
    $error_level = variable_get('error_level');
    $requirements['ug_system_error_level'] = array(
      'title' => t('UG Error Messages'),
      'description' => t('Checks if error messages is turned off'),
    );
    if ($error_level != '0'){
      $requirements['ug_system_error_level']['value'] = t('Not configured');
      $requirements['ug_system_error_level']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_error_level']['description'] = t('Turn error messages off. Value should be None');
    }

    // --------------
    // CACHE LIFETIME
    // --------------
    $cache_lifetime = variable_get('cache_lifetime');
    $requirements['ug_system_cache_lifetime'] = array(
      'title' => t('UG Minimum Cache lifetime'),
      'value' => t('Enabled'),
      'description' => t('This ensures that the cache lifettime is enabled at <a href="@cache_lifetime_settings">config/Performance</a> and it is set to 5 mins', array('@cache_lifetime_settings' => url('admin/config/development/performance'))),
    );
    if ($cache_lifetime != '300') {
      $requirements['ug_system_cache_lifetime']['value'] = t('Not enabled');
      $requirements['ug_system_cache_lifetime']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_cache_lifetime']['description'] = t('Enable caching at <a href="@cache_lifetime_settings">config/Performance</a> and set to 5 min', array('@cache_lifetime_settings' => url('admin/config/development/performance')));
    }

    // -----------------
    // CACHE MAXIMUM AGE
    // -----------------
    $page_cache_maximum_age = variable_get('page_cache_maximum_age');
    $requirements['ug_system_page_cache_maximum_age'] = array(
      'title' => t('UG Expiration of cached pages'),
      'value' => t('Enabled'),
      'description' => t('This ensures that the page caching is enabled at <a href="@cache_pages_settings">config/Performance</a> and it is set to 5 mins', array('@cache_pages_settings' => url('admin/config/development/performance'))),
    );
    if ($page_cache_maximum_age != '300') {
      $requirements['ug_system_page_cache_maximum_age']['value'] = t('Not enabled');
      $requirements['ug_system_page_cache_maximum_age']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_page_cache_maximum_age']['description'] = t('Enable caching at <a href="@cache_pages_settings">config/Performance</a> and set to 5 min', array('@cache_pages_settings' => url('admin/config/development/performance')));
    }

    // --------------------------------------------------------------------
    // LDAP CONFIGURATION - checks if binding is set and password is filled
    // --------------------------------------------------------------------
    $ldap = db_query("select * from {ldap_servers} where sid='ug'");
    $requirements['ug_system_ldap'] = array(
      'title' => t('UG Ldap binding'),
      'description' => t('This ensures LDAP proxy password is configured and LDAP method is set to binding under <a href="@ldap_settings">config/LDAP configuration/servers/binding method</a>' , array('@ldap_settings' => url('admin/config/people/ldap/servers/edit/ug'))),
    );
    if ($ldap->fetchColumn(11) == NULL && $ldap->fetchColumn(9) != '1' ) {
      $requirements['ug_system_ldap']['description'] = t('Ldap binding is not configured correctly go to <a href="@ldap_settings">config/LDAP configuration/servers/binding method</a>' , array('@ldap_settings' => url('admin/config/people/ldap/servers/edit/ug')));
      $requirements['ug_system_ldap']['severity'] = REQUIREMENT_ERROR;
    }

    // ------------------------------------
    // CREATES TO ADD SITE TO NAGIOS
    // -------------------------------------
    $nagios = variable_get('ug_system_add_nagios');
    $requirements['ug_system_add_nagios'] = array(
      'title' => t('UG add website to Nagios'),
      'value' => t('Ticket submitted'),
      'description' => t('This ensures a footprints ticket has been sent to add the site url to nagios'),
    );
    if ($nagios != '1') {
      $requirements['ug_system_add_nagios']['value'] = t('Ticket has not been created');
      $requirements['ug_system_add_nagios']['severity'] = REQUIREMENT_ERROR;
      $requirements['ug_system_add_nagios']['description'] = t('Go to the config form to submit ticket');
    }

    // -----------------
    // GOOGLE ANALYTICS
    // -----------------
    $google_analytics_module = module_exists('googleanalytics');
    $requirements['ug_system_google_analytics'] = array(
      'title' => t('UG Google analytics module'),
      'value' => t('Enabled'),
      'description' => t('This ensures the google analytics module is enabled'),
    );
    if ($google_analytics_module == FALSE) {
      $requirements['ug_system_google_analytics']['value'] = t('Not enabled');
      $requirements['ug_system_google_analytics']['severity'] = REQUIREMENT_WARNING;
      $requirements['ug_system_google_analytics']['description'] = t('Turn on google analytics module');
    }

    // ----------------------------------------
    // CHECKS FOR W-STAGE pattern in menu links
    // ----------------------------------------
    $menu_link_check = db_query("select link_path from {menu_links} where link_path LIKE '%w-stage%'")->fetchAll();
    foreach ($menu_link_check as $row) {
      $arr = array($row->link_path);
    }
    $requirements['ug_system_test'] = array(
      'title' => t('UG menu links'),
      'value' => t('No links'),
      'description' => t('Ensures there are no menu links to the stage site'),
    );
    if ($menu_link_check != NULL ) {
      $requirements['ug_system_test']['description'] = t('There are menu links to the stage site');
      $requirements['ug_system_test']['value'] = t('@num link(s)', array('@num' => count($menu_link_check)) );
      $requirements['ug_system_test']['severity'] = REQUIREMENT_ERROR;
    }

    // -----------------------------
    // CHECKS LUMTURIO FOR SITE URL
    // -----------------------------
    $get_result = ug_system_lumturio_get("/site.getsites");
    $lumturio = variable_get('ug_system_add_lumturio');
    $requirements['ug_system_add_lumturio'] = array(
      'title' => t('UG add website to Lumturio'),
      'description' => t('This ensures the website has been added to the lumturio dashboard'),
    );
    if($get_result['ok'] == TRUE) {
      $sites = $get_result['items'];
      $site_available = FALSE;

      foreach($sites as $site) {
        if($site['site_url'] == $base_url) {
          $site_available = TRUE;
          break;
        }
        else {
          $site_available = FALSE;
        }
      }
      if ($site_available == TRUE) {
        $requirements['ug_system_add_lumturio']['value'] = t("site is already on lumturio");
      }
      else {
        $requirements['ug_system_add_lumturio']['value'] = t("Please add " .$base_url. " to the lumturio dashboard");
        $requirements['ug_system_add_lumturio']['severity'] = REQUIREMENT_ERROR;
      }

      $lumturio_checkbox = variable_get('ug_system_add_lumturio');
      if ($site_available == FALSE && $lumturio_checkbox == '1') {
        $post_result = ug_system_lumturio_post("/site.addsite");
        if($post_result['ok'] == true) {
          $requirements['ug_system_add_lumturio']['value'] = t("Site has been added to lumturio");
          $requirements['ug_system_add_lumturio']['severity'] = REQUIREMENT_OK;
        }
      }
    }
}

return $requirements;
}
